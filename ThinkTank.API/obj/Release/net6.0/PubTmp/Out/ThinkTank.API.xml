<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkTank.API</name>
    </assembly>
    <members>
        <member name="M:ThinkTank.API.Controllers.AccountsController.GetAccounts(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.AccountRequest)">
            <summary>
            Get list of accounts
            </summary>
            <param name="pagingRequest"></param>
            <param name="userRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.GetAccount(System.Int32)">
            <summary>
            Get account by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.UpdateAccount(ThinkTank.Service.DTO.Request.UpdateAccountRequest,System.Int32)">
            <summary>
            Update profile of account
            </summary>
            <param name="userRequest"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.GetToUpdateStatus(System.Int32)">
            <summary>
            Update Status Of Account (Online/Offline)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.GetToBanAccount(System.Int32)">
            <summary>
            Ban Account
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.Verification(System.String)">
            <summary>
            Send Verification Code  
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.CreateCustomer(ThinkTank.Service.DTO.Request.CreateAccountRequest)">
            <summary>
            Sign Up account
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.LoginPlayer(ThinkTank.Service.DTO.Request.LoginRequest)">
            <summary>
            Login for role player (Username and Password)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.LoginAdmin(ThinkTank.Service.DTO.Request.LoginRequest)">
            <summary>
            Login for role admin (Username and Password)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.ResetPassword(ThinkTank.Service.DTO.Request.ResetPasswordRequest)">
            <summary>
            Reset password when forgot password
            </summary>
            <param name="resetPassword"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.VerifyAndGenerateToken(ThinkTank.Service.DTO.Request.TokenRequest)">
            <summary>
            Generate new access token and refresh token when they are expired
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.RevokeRefreshToken(System.Int32)">
            <summary>
            Revoke refresh token when logout 
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.LoginGoogle(System.String,System.String)">
            <summary>
            Login Google 
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AccountsController.GetGameLevelByAccountId(System.Int32)">
            <summary>
            Get current game level of account
            </summary>
            <param name="accountId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AchieviementsController.GetAchievements(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.AchievementRequest)">
            <summary>
            Get list of achievements
            </summary>
            <param name="pagingRequest"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AchieviementsController.GetAchievement(System.Int32)">
            <summary>
            Get achievement  by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AchieviementsController.CreateAchievement(ThinkTank.Service.DTO.Request.CreateAchievementRequest)">
            <summary>
            Add achievement
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.AchieviementsController.GetLeaderboard(System.Int32)">
            <summary>
            Get lederboard of a level of the game
            </summary>
            <param name="gameId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ChallengesController.GetChallenges(ThinkTank.Service.DTO.Request.ChallengeRequest)">
            <summary>
            Get challenges of account(1: All, 2 : True, 3:False, 4: Null)
            </summary>
            <param name="challengeRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ContestController.GetContests(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.ContestRequest)">
            <summary>
            Get list of contest (1: All, 2 : True, 3:False, 4: Null)
            </summary>
            <param name="pagingRequest"></param>
            <param name="contestRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ContestController.GetLeaderboardOfContest(System.Int32)">
            <summary>
            Get lederboard of contest
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ContestController.GetContest(System.Int32)">
            <summary>
            Get contest by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ContestController.CreateContest(ThinkTank.Service.DTO.Request.CreateContestRequest)">
            <summary>
            Create Contest
            </summary>
            <param name="contestRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ContestController.UpdateContest(ThinkTank.Service.DTO.Request.CreateContestRequest,System.Int32)">
            <summary>
            Update contest
            </summary>
            <param name="contestRequest"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ContestController.DeleteContest(System.Int32)">
            <summary>
            Delete contest
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.FilesController.UploadFile(Microsoft.AspNetCore.Http.IFormFile,ThinkTank.Service.Helpers.Enum.FileType)">
            <summary>
            Upload file (FileType: System=1, Player=2)
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ThinkTank.API.Controllers.FilesController.UploadFileResource(Microsoft.AspNetCore.Http.IFormFile,ThinkTank.Service.Helpers.Enum.ResourceType)">
            <summary>
            Upload file for resources game ( ResourceType: Anonymous=1,MusicPassword=2,FlipCard=3,ImagesWalkthrough=4,StoryTeller=5)
            </summary>
        </member>
        <member name="M:ThinkTank.API.Controllers.FilesController.UploadFileContestResource(Microsoft.AspNetCore.Http.IFormFile,ThinkTank.Service.Helpers.Enum.ResourceType)">
            <summary>
            Upload file for contest resources game ( ResourceType: Anonymous=1,MusicPassword=2,FlipCard=3,ImagesWalkthrough=4)
            </summary>
        </member>
        <member name="M:ThinkTank.API.Controllers.FriendsController.GetFriends(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.FriendRequest)">
            <summary>
            Get list of friendships (1: All, 2 : True, 3:False, 4: Null)
            </summary>
            <param name="pagingRequest"></param>
            <param name="friendRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.FriendsController.GetFriend(System.Int32)">
            <summary>
            Get friendship by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.FriendsController.GetToUpdateStatus(System.Int32)">
            <summary>
            Accept friend
            </summary>
            <param name="friendId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.FriendsController.AddFriend(ThinkTank.Service.DTO.Request.CreateFriendRequest)">
            <summary>
            Add friend
            </summary>
            <param name="friend"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.FriendsController.DeleteFriendship(System.Int32)">
            <summary>
            Unaccept friend
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.GamesController.GetGames(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.GameRequest)">
            <summary>
            Get list of games
            </summary>
            <param name="pagingRequest"></param>
            <param name="gameRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.GamesController.GetGame(System.Int32)">
            <summary>
            Get game by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.GamesController.GetGameLevel(System.Int32,ThinkTank.Service.DTO.Request.PagingRequest)">
            <summary>
            Get list game level by  game Id
            </summary>
            <param name="id"></param>
            <param name="pagingRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.IconsController.GetIcons(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.IconRequest)">
            <summary>
            Get list of icons
            </summary>
            <param name="pagingRequest"></param>
            <param name="iconRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.IconsController.GetIcon(System.Int32)">
            <summary>
            Get icon by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.IconsController.GetToUpdateStatus(System.Int32)">
            <summary>
            Update status of icon
            </summary>
            <param name="iconId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.IconsController.AddIcon(ThinkTank.Service.DTO.Request.CreateIconRequest)">
            <summary>
            Add icon
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.IconsController.AddIconOfAccount(ThinkTank.Service.DTO.Request.IconOfAccountRequest)">
            <summary>
            Buy Icon 
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.NotificationsController.GetNotifications(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.NotificationRequest)">
            <summary>
            Get list of notification
            </summary>
            <param name="pagingRequest"></param>
            <param name="notificationRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.NotificationsController.GetNotification(System.Int32)">
            <summary>
            Get notification by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ReportsController.GetReports(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.ReportRequest)">
            <summary>
            Get list of reports
            </summary>
            <param name="pagingRequest"></param>
            <param name="reportRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ReportsController.GetReport(System.Int32)">
            <summary>
            Get report by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.ReportsController.AddReport(ThinkTank.Service.DTO.Request.CreateReportRequest)">
            <summary>
            Create report
            </summary>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TopicsController.GetTopics(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.TopicRequest)">
            <summary>
            Get list of topic
            </summary>
            <param name="pagingRequest"></param>
            <param name="anonymousRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TopicsController.GetTopic(System.Int32)">
            <summary>
            Get topic by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TopicsController.CreatTopic(ThinkTank.Service.DTO.Request.TopicRequest)">
            <summary>
            Create Topic
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TopicsController.UpdateTopic(ThinkTank.Service.DTO.Request.TopicRequest,System.Int32)">
            <summary>
            Update topic
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TypeOfAssetsController.GetAssets(ThinkTank.Service.DTO.Request.PagingRequest,ThinkTank.Service.DTO.Request.TypeOfAssetRequest)">
            <summary>
            Get list of assets
            </summary>
            <param name="pagingRequest"></param>
            <param name="assetRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TypeOfAssetsController.GetTypeOfAssetsById(System.Int32)">
            <summary>
            Get type of asset  by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TypeOfAssetsController.CreateTypeOfAsset(ThinkTank.Service.DTO.Request.CreateTypeOfAssetRequest)">
            <summary>
            Create type of asset  
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TypeOfAssetsController.UpdateResource(ThinkTank.Service.DTO.Request.CreateTypeOfAssetRequest,System.Int32)">
            <summary>
            Update resource
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.TypeOfAssetsController.DeleteResource(System.Int32)">
            <summary>
            Delete resource
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkTank.API.Controllers.VersionResourcesController.GetVersionOfResources">
            <summary>
            Get current version of resources
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
